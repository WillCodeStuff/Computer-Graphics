float Circle(vec2 p, vec2 c, float r){
    float d = length(p-c);
    return smoothstep(fwidth(d),0.0,d-r);
}

float Line (vec2 p, vec2 a, vec2 b){
    vec2 pa= p-a, ba = b-a;
    float t= clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);
    vec2 c = a + ba*t;
    float d = length(c-p);
    return smoothstep(fwidth(d),0.0,d-0.001);
}

vec2 Bezier(vec2 a, vec2 b, vec2 c, float t){
    return mix(mix(a,c,t),mix(c,b,t),t);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;
 
    vec3 col = vec3(0); 
    float t = sin(iTime)*0.5 + 0.5;
    
    vec2
        A = vec2(-0.4,-0.2), 
        B = vec2(0.4,0.2),
        C = (iMouse.xy-iResolution.xy*0.5)/iResolution.x,
        AC = mix(A,C,t),
        CB = mix(C,B,t),
        ACB = mix(AC,CB,t);

    
    col += vec3(1,0,0)*Circle(uv,A,0.03); //Starting Point
    col += vec3(0,0,1)*Circle(uv,B,0.03); //Ending Point
    col += vec3(0,1,0)*Circle(uv,C,0.03); //Control Point
    col += vec3(1,0,1)*Circle(uv,ACB,0.03); //point that travels across the curve
    
    
    
    //Extra lines and points that visualize how the curve is calculated
    //col += vec3(0,1,1)*Circle(uv,AC,0.03);
    //col += vec3(1,1,0)*Circle(uv,CB,0.03);
    //col+= Line(uv,A,C)+Line(uv,C,B);
    //col+= Line(uv,AC,CB);
    
    
    int NUM_SEGS = 25;
    vec2 P, PP = A; //Point, Previous Point
    float ct;
    
    for(int i = 1; i<=NUM_SEGS; i++){  
       ct = float(i)/float(NUM_SEGS); 
       P = Bezier(A,B,C,ct);
       col += max(col,Line(uv,P,PP));
       PP=P;
    }

    // Output to screen
    fragColor = vec4(col,1.0);
}
